apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    namespace "seedit.android"
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "seedit.android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

repositories {
    google()
    mavenCentral()
    maven { url "https://maven.google.com" }
    flatDir{
        dirs '../capacitor-cordova-android-plugins/src/main/libs', 'libs'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoCoreVersion"
    implementation "org.apache.cordova:framework:$cordovaAndroidVersion"
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okio:okio:3.9.0'
}

apply from: 'capacitor.build.gradle'

// Google Services plugin - only apply if file exists and has content
// This is wrapped in multiple safety checks to prevent CI failures
try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON != null && servicesJSON.exists() && servicesJSON.length() > 0) {
        try {
            // Additional safety check - ensure the plugin is available in classpath
            apply plugin: 'com.google.gms.google-services'
            println("✓ Google Services plugin applied successfully")
        } catch (Exception pluginError) {
            println("⚠ Google Services plugin not available or failed to apply: ${pluginError.message}")
            println("  This is not a critical error - the app will build without push notifications")
        }
    } else {
        println("ℹ google-services.json not found - building without Google Services")
        println("  Push notifications will not be available, but this is not an error")
    }
} catch(Exception e) {
    println("ℹ Google Services check failed: ${e.message}")
    println("  Continuing build without Google Services - this is not a critical error")
}
